/**
 * Odamex's server-to-client protocol.
 */

syntax="proto3";

import "common.proto";

package odaproto.clc;

// clc_disconnect
message Disconnect
{
}

// clc_say
message Say
{
	int32 visibility = 1;
	string message = 2;
}

// clc_move: send cmds
message Move
{
	int32 tic = 1;
	bytes cmds = 2;
}

// clc_userinfo: send userinfo
message ClientUserInfo
{
	UserInfo userinfo = 1;
}

// clc_pingreply: [SL] 2011-05-11 - timestamp
message PingReply
{
	uint64 ms_time = 1;
}

// clc_ack
message Ack
{
	int32 recent = 1;
	fixed32 ack_bits = 2;
}

// clc_rcon
message RCon
{
	string command = 1;
}

// clc_rcon_password
message RConPassword
{
	bool is_login = 1;
	string passhash = 2;
}

// clc_spectate: denis
message Spectate
{
	int32 command = 1;
	Vec3 pos = 2;
}

// clc_kill: denis - suicide
message Kill
{
}

// clc_cheat: denis - handle cheat codes.
message Cheat
{
	oneof cheat_type
	{
		int32 cheat_number = 1;
		string give_item = 2; 
	}
}

// clc_callvote: [LM] - Calling a vote
message CallVote
{
}

// clc_maplist: [LM] - Maplist status request.
message MapList
{
}

// clc_maplist_update: [LM] - Request the entire maplist from the server.
message MapListUpdate
{
}

// clc_getplayerinfo
message GetPlayerInfo
{
}

// clc_netcmd: [LM] Send a string command to the server.
message NetCmd
{
	repeated string args = 1;
}

// clc_spy: [SL] Tell server to send info about this player
message Spy
{
	int32 pid = 1;
}

// clc_privmsg: [LM] Targeted chat to a specific player.
message PrivMsg
{
	int32 pid = 1;
	string message = 2;
}
